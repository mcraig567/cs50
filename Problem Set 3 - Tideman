#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
bool cycle_check(int start, int end);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(candidates[i], name) == 0)
        {
            ranks[rank] = i;
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    //Ranks[0] will have priority over all other ranks, ranks[1] will have priority over ranks to its right
    for (int i = 0; i < candidate_count - 1; i++)
    {
        for (int j = i + 1; j < candidate_count; j++)
        {
            preferences[ranks[i]][ranks[j]] ++;
        }
    }
    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    for (int i = 0; i < candidate_count; i++)
    {

        for (int j = 0; j < candidate_count; j++)
        {
            //Preference exists and no ties between candidates, increase counter for next pair
            if (preferences[i][j] != 0 && preferences[i][j] != preferences[j][i])
            {
                //Check to see if pair already exists
                bool exist_check = false;

                pair test_pair1, test_pair2;
                test_pair1.winner = i;
                test_pair1.loser = j;

                test_pair2.winner = j;
                test_pair2.loser = i;

                for (int k = 0; k < pair_count; k++)
                {
                    if ((pairs[k].winner == i && pairs[k].loser == j) || (pairs[k].winner == j && pairs[k].loser == i))
                    {
                        exist_check = true;
                    }
                }

                //When pair doesn't exist yet
                if (exist_check == false)
                {
                    //Add pair of higher preference (AB or BA)
                    if (preferences[i][j] > preferences[j][i])
                    {
                        pairs[pair_count] = test_pair1;
                        pair_count++;
                    }
                    else
                    {
                        pairs[pair_count] = test_pair2;
                        pair_count++;
                    }
                }
            }
        }
    }
    return;
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    //pairs[0].winner = 0
    //pairs[0].loser = 1
    //preferences[0][1] = 1
    //preferences[pairs[0].winner][pairs[0].loser] = 1

    int highest;
    int highest_spot = 0;
    pair pair_holder;

    //Selection sort for highest preference
    for (int j = 0; j < pair_count; j++)
    {
        highest = 0;

        for (int i = j; i < pair_count; i++)
        {
            int value = preferences[pairs[i].winner][pairs[i].loser];

            if (value > highest)
            {
                highest = preferences[pairs[i].winner][pairs[i].loser];
                highest_spot = i;
            }
        }

    pair_holder = pairs[j];
    pairs[j] = pairs[highest_spot];
    pairs[highest_spot] = pair_holder;
    }
    return;
}

//Check for cycles
bool cycle_check(int start, int end)
{
    if (start == end)
    {
        return true;
    }

    for (int i = 0; i < candidate_count; i++)
    {
        //Check to see if loser beats a candidate
        if (locked[end][i])
        {
            //Recursively check to see if there is a loop further down 
            if (cycle_check(start, end))
            {
                return true;
            }
        }
    }

    return false;
}


// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    int winner_list[MAX];

    //iterate through pairs
    for (int i = 0; i < pair_count; i++)
    {
        //Check to see if loop (Pointing to a previous 'winner')
        if (!cycle_check(pairs[i].winner, pairs[i].loser))
        {
            locked[pairs[i].winner][pairs[i].loser] = true;
        }
    }

    return;
}

// Print the winner of the election
void print_winner(void)
{
    //True in the column # of which row # has no True is the winner

    //Iterate through rows
    for (int i = 0; i < MAX; i++)
    {
        bool check = true;
        int check_row;

        //look for True in a row -- iterate through columns
        for (int j = 0; j < MAX; j++)
        {
            printf("Winner: %s\n", candidates[i]);
            printf("Loser: %s\n", candidates[j]);

            if (locked[i][j] == true)
            {
                printf("Result: True\n");
            }
            else
            {
                printf("Result: False\n");
            }
            printf("\n");

            if (locked[i][j] == true)
            {
                check = false;
                check_row = j;
            }
        }

        //print winner
        if (check == true)
        {
            printf("%s\n", candidates[check_row]);
            return;
        }
    }

    return;
}
